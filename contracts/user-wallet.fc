#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/send-modes.fc";
#include "imports/dtelecom-utils.fc";
#include "imports/dtelecom-op-codes.fc";

(slice, slice, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_msg_addr(), ;; owner_address
        ds~load_msg_addr(), ;; master_address
        ds~load_ref()       ;; user_wallet_code
    );
}

() save_data(slice owner_address, slice master_address, cell user_wallet_code) impure inline {
    set_data(pack_user_wallet_data(owner_address, master_address, user_wallet_code));
}

() withdraw(int query_id, slice sender_address, int amount) impure {
    (slice owner_address, slice master_address, cell user_wallet_code) = load_data();
    throw_unless(707, equal_slices(owner_address, sender_address));

    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(owner_address)
            .store_coins(amount)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(msg.end_cell(), 64);
}

() pay_rewards(int query_id, slice sender_address, slice node_address, slice node_owner_address, int amount) impure {
    (slice owner_address, slice master_address, cell user_wallet_code) = load_data();
    throw_unless(707, equal_slices(master_address, sender_address));

    var msg_body0 = begin_cell()
            .store_uint(op::reward(), 32)
            .store_uint(query_id, 64)
            .end_cell();
    var msg0 = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(master_address)
            .store_coins(amount)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body0);
    send_raw_message(msg0.end_cell(), PAY_FEES_SEPARATELY);

    var msg_body1 = begin_cell()
            .store_uint(op::reward(), 32)
            .store_uint(query_id, 64)
            .end_cell();
    var msg1 = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(node_address)
            .store_coins(amount)
            .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
            .store_ref(msg_body1);
    send_raw_message(msg1.end_cell(), PAY_FEES_SEPARATELY);

    var msg = begin_cell()
        .store_uint(0x18, 6)
            .store_slice(node_owner_address)
            .store_coins(0)
            .store_uint(0, 1 + 4 + 4 + 64 + 32 + 1 + 1);
    send_raw_message(msg.end_cell(), CARRY_REMAINING_GAS);
}

() recv_internal(cell in_msg_full, slice in_msg_body) impure {
    ~dump(3);
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }

    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);
    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    if (op == op::withdraw()) {
        int amount = in_msg_body~load_coins();
        withdraw(query_id, sender_address, amount);
        return ();
    }

    if (op == op::pay_rewards()) {
        int amount = in_msg_body~load_coins();
        slice node_address = in_msg_body~load_msg_addr();
        slice node_owner_address = in_msg_body~load_msg_addr();
        pay_rewards(query_id, sender_address, node_address, node_owner_address, amount);
        return ();
    }
}

(slice, slice, cell) get_wallet_data() method_id {
    return load_data();
}
