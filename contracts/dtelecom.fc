#include "imports/stdlib.fc";
#include "imports/params.fc";
#include "imports/dtelecom-utils.fc";
#include "imports/dtelecom-op-codes.fc";

(int, slice, cell, cell) load_data() inline {
    slice ds = get_data().begin_parse();
    return (
        ds~load_coins(), ;; balance
        ds~load_msg_addr(), ;; admin_address
        ds~load_ref(), ;; user_wallet_code
        ds~load_ref() ;; node_wallet_code
    );
}

() save_data(int balance, slice admin_address, cell user_wallet_code, cell node_wallet_code) impure inline {
    set_data(begin_cell()
            .store_coins(balance)
            .store_slice(admin_address)
            .store_ref(user_wallet_code)
            .store_ref(node_wallet_code)
            .end_cell()
    );
}

() increase_user_balance(int query_id, slice user_address, int amount, cell user_wallet_code) impure {
    cell state_init = calculate_user_wallet_state_init(user_address, my_address(), user_wallet_code);
    slice user_wallet_address = calculate_wallet_address(state_init);
    var msg_body = begin_cell()
            .store_uint(op::increase_balance(), 32)
            .store_uint(query_id, 64)
            .store_coins(amount)
            .end_cell();
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(user_wallet_address)
            .store_coins(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 64);
}

() create_node(int query_id, slice node_address, slice node_host, cell node_wallet_code) impure {
    cell state_init = calculate_node_wallet_state_init(node_address, my_address(), node_wallet_code);
    slice node_wallet_address = calculate_wallet_address(state_init);
    int node_host_len_in_bits = slice_bits(node_host);
    var msg_body = begin_cell()
            .store_uint(op::set_host(), 32)
            .store_uint(query_id, 64)
            .store_uint(node_host_len_in_bits / 8, 8)
            .store_slice(node_host)
            .end_cell();
    var msg = begin_cell()
            .store_uint(0x18, 6)
            .store_slice(node_wallet_address)
            .store_coins(0)
            .store_uint(4 + 2 + 1, 1 + 4 + 4 + 64 + 32 + 1 + 1 + 1)
            .store_ref(state_init)
            .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 64);
}

() node_room_ended(int query_id, slice creator_user_address, int spent_minutes, int balance, slice admin_address, cell user_wallet_code, cell node_wallet_code) impure {
    int room_price = spent_minutes * 10; ;; fixed price of one minute
    balance += room_price;
    save_data(balance, admin_address, user_wallet_code, node_wallet_code);

    var msg_body = begin_cell()
                    .store_uint(op::burn(), 32)
                    .store_uint(query_id, 64)
                    .store_coins(room_price)
                    .end_cell();
    var msg = begin_cell()
                .store_uint(0x18, 6)
                .store_slice(calculate_user_wallet_address(creator_user_address, my_address(), user_wallet_code))
                .store_coins(0)
                .store_uint(1, 1 + 4 + 4 + 64 + 32 + 1 + 1)
                .store_ref(msg_body);
    send_raw_message(msg.end_cell(), 64);
}

() recv_internal(int msg_value, cell in_msg_full, slice in_msg_body) impure {
    if (in_msg_body.slice_empty?()) { ;; ignore empty messages
        return ();
    }
    slice cs = in_msg_full.begin_parse();
    int flags = cs~load_uint(4);

    if (flags & 1) { ;; ignore all bounced messages
        return ();
    }
    slice sender_address = cs~load_msg_addr();

    int op = in_msg_body~load_uint(32);
    int query_id = in_msg_body~load_uint(64);

    (int balance, slice admin_address, cell user_wallet_code, cell node_wallet_code) = load_data();

    if (op == op::increase_user_balance()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice user_address = in_msg_body~load_msg_addr();
        int amount = in_msg_body~load_coins();

        increase_user_balance(query_id, user_address, amount, user_wallet_code);

        return ();
    }

    if (op == op::create_node()) {
        throw_unless(73, equal_slices(sender_address, admin_address));
        slice node_address = in_msg_body~load_msg_addr();
        int node_host_length = in_msg_body~load_uint(8);
        slice node_host = in_msg_body~load_bits(node_host_length * 8);

        create_node(query_id, node_address, node_host, node_wallet_code);

        return ();
    }

    if (op == op::node_room_ended()) {
        slice node_address = in_msg_body~load_msg_addr();
        throw_unless(73, equal_slices(sender_address, calculate_node_wallet_address(node_address, my_address(), node_wallet_code)));
        slice creator_user_address = in_msg_body~load_msg_addr();
        int spent_minutes = in_msg_body~load_uint(32);

        node_room_ended(query_id, creator_user_address, spent_minutes, balance, admin_address, user_wallet_code, node_wallet_code);

        return ();
    }
}

(int, slice) get_dtelecom_data() method_id {
    (int balance, slice admin_address, cell user_wallet_code, cell node_wallet_code) = load_data();
    return (balance, admin_address);
}

slice get_user_wallet_address(slice user_address) method_id {
    (int balance, slice admin_address, cell user_wallet_code, cell node_wallet_code) = load_data();
    return calculate_user_wallet_address(user_address, my_address(), user_wallet_code);
}

slice get_node_wallet_address(slice node_address) method_id {
    (int balance, slice admin_address, cell user_wallet_code, cell node_wallet_code) = load_data();
    return calculate_node_wallet_address(node_address, my_address(), node_wallet_code);
}